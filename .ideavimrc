let mapleader=" "

set scrolloff=20
set ignorecase

set incsearch
set relativenumber
set visualbell
set clipboard+=unnamed

" toggle search highlight.
map <c-l> :set hlsearch!<cr>

"
" mappings
"

map <c-c> <Action>(EditorScrollToCenter)

" cycle forward/back between known locations.
map <c-O> <Action>(Forward)
map <c-I> <Action>(Back)

" insert line top & bottom.
map <leader>o O<cr><esc>

" fast scroll.
noremap <s-k> 2<c-y>
noremap <s-j> 2<c-e>

"
" idea.
"

" reload config.
map <leader>cr :source ~/.ideavimrc<cr>

" built-ins.
map / <Action>(Find)
map <leader>rn <Action>(RunAnything)
map <leader>te <Action>(ActivateTerminalToolWindow)
map <leader>lo <Action>(RecentLocations)
map <leader>sw <Action>(Switcher)

" windows.
map <leader>wh <Action>(HideAllWindows)

" selection.
map <a-up> <Action>(EditorSelectWord)
map <a-down> <Action>(EditorUnSelectWord)

" editing.
map <a-s-up> <Action>(MoveLineUp)
map <a-s-down> <Action>(MoveLineDown)

" movement.
map [m <Action>(MethodUp)
map ]m <Action>(MethodDown)

" intellisense.
map <leader>rf <Action>(Refactorings.QuickListPopupAction)
map <leader>ca <Action>(ShowIntentionActions)
map <leader>dc <Action>(QuickJavaDoc)
map <leader>gd <Action>(GotoDeclaration)
map <leader>pi <Action>(QuickImplementations)
map <leader>pt <Action>(ExpressionTypeInfo)
map <leader>pp <Action>(ParameterInfo)

" diagnostics.

map <leader>]d <Action>(GotoNextError)
map <leader>[d <Action>(GotoPreviousError)
map <leader>di <Action>(ActivateProblemsViewToolWindow)

" git.
map <leader>glc <Action>(Vcs.Show.Local.Changes)
map <leader>gbr <Action>(Git.Branches)
map <leader>gpl <Action>(Git.Pull)
map <leader>gcp <Action>(Git.CompareWithBranch)
map <leader>gre <Action>(Compare.Selected)
map <leader>gpr <Action>(Github.View.Pull.Request)
map <leader>ghs <Action>(Vcs.ShowHistoryForBlock)
map <leader>ghf <Action>(Vcs.ShowTabbedFileHistory)
map <leader>gmn <Action>(Git.Menu)

